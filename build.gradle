plugins {
    id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id "me.modmuss50.mod-publish-plugin" version "0.7.4"
}

apply from: 'https://raw.githubusercontent.com/FTBTeam/mods-meta/main/gradle/changelog.gradle'

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = mod_version

    apply from: "https://raw.githubusercontent.com/FTBTeam/mods-meta/main/gradle/publishing.gradle"
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        archivesName = "$rootProject.archives_name-$project.name"
    }

    repositories {
        maven {
            url = "https://maven.ftb.dev/releases"
        }
        maven {
            name = "Jared's maven"
            url = "https://maven.blamejared.com/"
        }
    }

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.officialMojangMappings()
    }

    java {
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        repositories {
            if (ftbPublishing.ftbToken) {
                maven {
                    url ftbPublishing.ftbURL
                    credentials {
                        username = ftbPublishing.ftbUser
                        password = ftbPublishing.ftbToken
                    }
                }
            }
        }
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSEFORGE_KEY").getOrNull() == null
    changelog = createChangelog(project)
    version = mod_version

    // TODO: Migrate to something else
    def tag = providers.environmentVariable("GITHUB_REF_NAME").getOrElse("release")
    type = tag.contains("-beta") ? BETA : (tag.contains("-alpha") ? ALPHA : STABLE)

    def createOptions = (String projectName) -> {
        publishOptions {
            file = project.provider { project(":$projectName").tasks.remapJar }.flatMap { it.archiveFile }
            displayName = "[${projectName.toUpperCase()}] FTB Materials ${mod_version}"
            modLoaders.add(projectName.toLowerCase())
        }
    }

    def fabricOptions = createOptions("fabric")
    def neoForgeOptions = createOptions("neoforge")

    def curseForgeOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSEFORGE_KEY")
        minecraftVersions.add("${minecraft_version}")
        javaVersions.add(JavaVersion.VERSION_21)
    }

    curseforge("curseforgeFabric") {
        from(curseForgeOptions, fabricOptions)
        projectId = curseforge_id
        requires('architectury-api')
        requires('fabric-api')
    }

    curseforge("curseforgeNeoForge") {
        from(curseForgeOptions, neoForgeOptions)
        projectId = curseforge_id
        requires("architectury-api")
    }

    github {
        displayName = project.version
        file = project.provider { project(":neoforge").tasks.remapJar }.flatMap { it.archiveFile }
        additionalFiles.from project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
        repository = "ftbteam/ftb-materials"
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        commitish = providers.environmentVariable("GITHUB_SHA").orElse("dryRun")
        tagName = providers.environmentVariable("GITHUB_REF_NAME").orElse("dryRun")
    }
}
